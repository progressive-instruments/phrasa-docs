{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is Phrasa? Phrasa is a music make language. It was born out of the idea that most music can be broken down to sections within sections, repeating themselves as a whole or in some variation. Each section is called a Phrase . Phrasa is the tool for writing down the hierarchy of the musical piece, reusing phrases and harmony. Writing music with Phrasa allow your musical piece to grow , instead writing down a rigid sequence of notes, you build a flexible structure of phrases and events. Does it require me to know programming ? Nope, Phrasa is not a programming language. Does it require me to have a musical background ? Nope, you can find all the knowledge you require in this documentation. Come on then, get started !","title":"Home"},{"location":"#what-is-phrasa","text":"Phrasa is a music make language. It was born out of the idea that most music can be broken down to sections within sections, repeating themselves as a whole or in some variation. Each section is called a Phrase . Phrasa is the tool for writing down the hierarchy of the musical piece, reusing phrases and harmony. Writing music with Phrasa allow your musical piece to grow , instead writing down a rigid sequence of notes, you build a flexible structure of phrases and events. Does it require me to know programming ? Nope, Phrasa is not a programming language. Does it require me to have a musical background ? Nope, you can find all the knowledge you require in this documentation. Come on then, get started !","title":"What is Phrasa?"},{"location":"concepts/","text":"Concepts Phrases In traditional music theory, a phrase is a semi-abstract term that defines a period of time within a piece that can be perceived by the listener as a whole unit. Phrasa build upon the traditional definition and extend into a much more abstract form. In Phrasa, a musical piece is by itself a single phrase, that is made out of multiple phrases that are made from more phrases and so on. Ratios Phrases durations are perceived in relation to each other. The relative durations of the phrases helps the listener to keep up with the piece, and build upon it's expectations. In phrasa we describe the length of a phrase as a ratio with relation to it's father phrase. By defining with length property of a phrase is defined relatively to its parent, for example '/4' or 'X2'. If the phrase contains inner phrases, the actual length will be the sum of them all multiiplied by it's own length. For example, if a phrase with a length of 1, contains 4 phrases of length 1/4, the final length will be 1/4 + 1/4 + 1/4 + 1/4 = 1. If the same phrase contains 5 phrases of length 1/4 it's final length will be 5/4. A phrase with the length of 2, containing 3 phrases of 1/4, will end up with the length of 3/4 X 2 = 6/4 Phrasa Expression Everything in Phrasa is either a value, a list of values or an expression. A value is defined in a single word without spaces. for example beat , 140bpm or 1/4 . A list of values are multiple values seperated with , or a newline within the same indentation. For example 1, 2.4235, 3/6 or: 1 2 3 snare kick drum arrays within arrays can be defined: 1 23,(10,20),33 or 1 2 3 23 10,20 33 An expression can be though of as a simple sentance consisting of 2 parts, a subject and an object. They can either be separated with spaces, for example: 1 tempo 120bpm or indented in a new line: 1 2 tempo 120bpm This expression sets the tempo (the subject) to 120 bpm (the object) The expression input can either be a value, such as above, or it can be a list of values: cool_sequence 10,20,10 or: 1 2 3 4 cool_sequence 10 20 30 expression input can also be an expression by itself, defined in a single row by encosing with paranthesis, for example 1 cool_event.offset (random 10%-40%)or in a new line:cool_event.offset random 10%-40% or: 1 2 3 cool_event.offset random 10%-40% And of course it can also be a list of expression/values, for example: 1 2 3 phrases.1 pitch.grid (chord Maj-C) // an expression which defines the pitch in the 1st phrase to be around the C Major chord. beat // a value that defines the 1st phrase as the beat phrase The most common type is the assignment expression which are at the core of Phrasa, functioning as instructions for updating the piece Tree. For example 1 pitch.zone F3 Which is an assignment expression for setting the property zone within the property pitch with the note value of F3. An expression type","title":"Concepts"},{"location":"concepts/#concepts","text":"","title":"Concepts"},{"location":"concepts/#phrases","text":"In traditional music theory, a phrase is a semi-abstract term that defines a period of time within a piece that can be perceived by the listener as a whole unit. Phrasa build upon the traditional definition and extend into a much more abstract form. In Phrasa, a musical piece is by itself a single phrase, that is made out of multiple phrases that are made from more phrases and so on.","title":"Phrases"},{"location":"concepts/#ratios","text":"Phrases durations are perceived in relation to each other. The relative durations of the phrases helps the listener to keep up with the piece, and build upon it's expectations. In phrasa we describe the length of a phrase as a ratio with relation to it's father phrase. By defining with length property of a phrase is defined relatively to its parent, for example '/4' or 'X2'. If the phrase contains inner phrases, the actual length will be the sum of them all multiiplied by it's own length. For example, if a phrase with a length of 1, contains 4 phrases of length 1/4, the final length will be 1/4 + 1/4 + 1/4 + 1/4 = 1. If the same phrase contains 5 phrases of length 1/4 it's final length will be 5/4. A phrase with the length of 2, containing 3 phrases of 1/4, will end up with the length of 3/4 X 2 = 6/4","title":"Ratios"},{"location":"concepts/#phrasa-expression","text":"Everything in Phrasa is either a value, a list of values or an expression. A value is defined in a single word without spaces. for example beat , 140bpm or 1/4 . A list of values are multiple values seperated with , or a newline within the same indentation. For example 1, 2.4235, 3/6 or: 1 2 3 snare kick drum arrays within arrays can be defined: 1 23,(10,20),33 or 1 2 3 23 10,20 33 An expression can be though of as a simple sentance consisting of 2 parts, a subject and an object. They can either be separated with spaces, for example: 1 tempo 120bpm or indented in a new line: 1 2 tempo 120bpm This expression sets the tempo (the subject) to 120 bpm (the object) The expression input can either be a value, such as above, or it can be a list of values: cool_sequence 10,20,10 or: 1 2 3 4 cool_sequence 10 20 30 expression input can also be an expression by itself, defined in a single row by encosing with paranthesis, for example 1 cool_event.offset (random 10%-40%)or in a new line:cool_event.offset random 10%-40% or: 1 2 3 cool_event.offset random 10%-40% And of course it can also be a list of expression/values, for example: 1 2 3 phrases.1 pitch.grid (chord Maj-C) // an expression which defines the pitch in the 1st phrase to be around the C Major chord. beat // a value that defines the 1st phrase as the beat phrase The most common type is the assignment expression which are at the core of Phrasa, functioning as instructions for updating the piece Tree. For example 1 pitch.zone F3 Which is an assignment expression for setting the property zone within the property pitch with the note value of F3. An expression type","title":"Phrasa Expression"},{"location":"getting_started/","text":"Getting Started This getting started session is intended to give you an overview over the capabilities of Phrasa. If you feel confused at some part, don't worry, In the next 'Concepts' section we will start right at the beginning. This guide presumes you have some minimal understanding about music and sound. If you are unfamiliar with terms like frequency, note or tempo you might want to begin with Phrasa Music and Sound Cheatsheet , or jump to it at any time you feel. Hello Sound Ok, let's play our first sound. Open 'Phrasa Control' and type the following text: 1 2 3 4 5 tempo 102bpm beat lead.event frequency 440 end 50% We defined and played the most basic Phrasa structure - a single musical phrase containing a single event playing repeatedly. Now let's open up the text. The first expression is tempo 102bpm assigns the value 102bpm to the subject tempo . The subject and the value are separated with space. The second line is beat which I'll explain in the next section. Next we have a 3 lines expression that assign a musical event to an instrument by the name of lead with the following properties: * Frequency of 440 hertz * End time of 50% the phrase length. In this case, the expression's subject is lead.event and the expression's input are 2 other expressions frequency 440 and end 50% , separated from the subject by a new line and a higher indentation level. To short things up we can replace the expression subject lead.event with lead~ Phrasing Let's make things slightly more interesting, adding some notes to be played: 1 2 3 4 5 6 7 tempo 135bpm phrases.1.lead~.note C3 phrases.2.lead~.note D3 phrases.3.lead~.note G3 phrases.4.lead~.note F3 phrases.1 beat In lines 2-5, we defined 4 musical phrases, each contains an event to be sent to the instrument lead with the property note . A 'phrase' in Phrasa is a fixed time frame where events can occur. A phrase can have inner phrases ordered one after the other. The code written above is quite repetitive, with 4 lines that look alike: phrases.x.lead~.note . We can rewrite them much more elegantly by using the incredible selector symbol '#': 1 2 3 4 5 phrases.#.lead~.note 1 C3 2 D3 3 G3 4 F4 This way we are selecting the phrase number we wish to define in the rows that follow the full subject path. the final expression phrases.1 beat defines the beat of the piece to be relative to the duration of the 1st phrase. This basically means that tempo (in this case 135 beats per minute) will be relative to the duration of the first phrase. You can find anything you want to know about phrases, lengths, beat and tempo right here . Finally again, let's make things shorter by replacing pharses.X with >X , for example: >1 beat . Harmony One of Phrasa's super powers is Relativity . Instead of working hard and repeating yourself, you can define things more generally, setting up events in relation to their phrase context. Let's explore what we can do with relative pitch, rewriting our previous code: 1 2 3 4 5 6 7 8 9 10 11 12 tempo 135bpm >1 beat pitch.grid (chord b-min) pitch.zone b3 >total 8 >#.lead~.pitch 1 3 4 4 6 -3 7 0 In lines 4-5 we defined the pitch base for our root phrase. pitch.grid defines the set of notes to be played, in this case any note related to the chord 'B minor'. pitch.zone defines the absolute base position over the frequency range. In this case, pitch will be relative to b3 - the note 'B' in the 3rd octave. The expression >total 8 sets the number of phrases to 8. If this property is not set, the last phrase that was assigned will be the last phrase (in this case 7). In lines 9-13 we set events for phrases 1,4,6 and 7. The assigned property for all events is pitch which defines the pitch offset relative to the pitch grid and zone that were defined in the phrase context. Let's see a few examples: '0' will be evaluated to the closest note to the pitch zone (B in the 3rd octave) within the pitch grid (B minor chord) - B3. '1' will be evaluated to the note after B3 within the B minor chord - D4. '-1' will be evaluated to the note before B3 within the B minor chord - F#3. Reusing Patterns Another super power of Phrasa is Reusability . Repetition is probably the most notable element of music composition. It's right there within the physical nature of every periodic sound. Without repetition, music is just random sound, or more technically - noise. Phrasa allows you to reuse musical elements within your piece and make variations over them - It's all about them phrases: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 tempo 127bpm pitch grid (chord c-maj) zone g4 >1-4 >1 beat >1-4.>#.lead~.pitch 2 0 4 1 >#.>3.lead~.pitch 1 -1 2 2 >3-4.pitch.grid (chord g-maj) Here, by using the subject >1-4 (lines 7 and 9), we assign some properties to phrases 1 to 4 in a single expression. Later in lines 12-14 we variate the properties for phrases 1.3 and 2.3. By setting multiple phrases collectively, we are keeping all their shared properties in one place. This will make our piece much more flexible. Check out the diagram below, representing the resulted phrases (the vertical lines) and events (the yellow rectangles): Imagine how hard you had to work writing these events one by one, and how hard you'd work if you wanted to change them. This is the true power of reusability. Sequencing Until now we have played with musical elements based on the concepts of hierarchy and repetition. What we're still missing is usage of the most fundamental concept of perceiving time - continuity , the phenomenon of things changing in a sequential manner. So what's Phrasa take on it? Sequences! 1 2 3 4 5 6 7 8 9 10 11 12 tempo 125bpm pitch grid (scale g-maj) zone g3 sequences.ascending 1,3,4,5,7 >1-4 beat >1-4.lead~.pitch (sequences.ascending >) >4.pitch.grid (scale d-maj) The expression sequences.ascending 1,3,4,5,7 (line 7) defines a sequence of values by the name ascending . In line 10 we assign the expression (sequences.ascending >) to the the property pitch . Each of the events assigned to this expression, will increment the sequence position by one (as indicated by the symbol > ) and use the current value of the sequence. Here is an illustration of the outcome: sequences.X subjects can be shorten to $X . Multiple Instruments Not supported . So we had all these cool stuff with a single instrument, so let's branch out and have multiple instruments playing together. Also, to make our code more readable and manageable we're gonna write down the piece in multiple files: 1 2 3 4 5 6 7 tempo 130bpm pitch grid (scale g-maj) zone g3 use drums use bass cool.piece 1 2 3 4 5 6 7 8 9 10 11 12 branches.cymbals >1-8 >#.drums~.sample 1 cym1 2 cym2 branches.kicks >total 16 >1 beat >1,5,8,14.drums~ sample kick >5,8.drums~ sample snare drums.motif 1 2 3 4 5 6 7 branches.bass $ascending 1,3,4,5,7 >1-4 beat >1-4.lead~.pitch ($ascending +) >4.pitch.grid (scale d-maj) bass.motif The main file of this piece is cool.piece which defines the base pitch and tempo. The use expressions import the entire content of an external .motif file. In the motif files we created 3 branches: cymbals , kicks and bass . A branch is a new phrase derived from the context of it's parent phrase, taking it's own path with it's own inner phrases, sequences and other things. It gives you the freedom to create multiple parallel structures and define events within each of them.","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"This getting started session is intended to give you an overview over the capabilities of Phrasa. If you feel confused at some part, don't worry, In the next 'Concepts' section we will start right at the beginning. This guide presumes you have some minimal understanding about music and sound. If you are unfamiliar with terms like frequency, note or tempo you might want to begin with Phrasa Music and Sound Cheatsheet , or jump to it at any time you feel.","title":"Getting Started"},{"location":"getting_started/#hello-sound","text":"Ok, let's play our first sound. Open 'Phrasa Control' and type the following text: 1 2 3 4 5 tempo 102bpm beat lead.event frequency 440 end 50% We defined and played the most basic Phrasa structure - a single musical phrase containing a single event playing repeatedly. Now let's open up the text. The first expression is tempo 102bpm assigns the value 102bpm to the subject tempo . The subject and the value are separated with space. The second line is beat which I'll explain in the next section. Next we have a 3 lines expression that assign a musical event to an instrument by the name of lead with the following properties: * Frequency of 440 hertz * End time of 50% the phrase length. In this case, the expression's subject is lead.event and the expression's input are 2 other expressions frequency 440 and end 50% , separated from the subject by a new line and a higher indentation level. To short things up we can replace the expression subject lead.event with lead~","title":"Hello Sound"},{"location":"getting_started/#phrasing","text":"Let's make things slightly more interesting, adding some notes to be played: 1 2 3 4 5 6 7 tempo 135bpm phrases.1.lead~.note C3 phrases.2.lead~.note D3 phrases.3.lead~.note G3 phrases.4.lead~.note F3 phrases.1 beat In lines 2-5, we defined 4 musical phrases, each contains an event to be sent to the instrument lead with the property note . A 'phrase' in Phrasa is a fixed time frame where events can occur. A phrase can have inner phrases ordered one after the other. The code written above is quite repetitive, with 4 lines that look alike: phrases.x.lead~.note . We can rewrite them much more elegantly by using the incredible selector symbol '#': 1 2 3 4 5 phrases.#.lead~.note 1 C3 2 D3 3 G3 4 F4 This way we are selecting the phrase number we wish to define in the rows that follow the full subject path. the final expression phrases.1 beat defines the beat of the piece to be relative to the duration of the 1st phrase. This basically means that tempo (in this case 135 beats per minute) will be relative to the duration of the first phrase. You can find anything you want to know about phrases, lengths, beat and tempo right here . Finally again, let's make things shorter by replacing pharses.X with >X , for example: >1 beat .","title":"Phrasing"},{"location":"getting_started/#harmony","text":"One of Phrasa's super powers is Relativity . Instead of working hard and repeating yourself, you can define things more generally, setting up events in relation to their phrase context. Let's explore what we can do with relative pitch, rewriting our previous code: 1 2 3 4 5 6 7 8 9 10 11 12 tempo 135bpm >1 beat pitch.grid (chord b-min) pitch.zone b3 >total 8 >#.lead~.pitch 1 3 4 4 6 -3 7 0 In lines 4-5 we defined the pitch base for our root phrase. pitch.grid defines the set of notes to be played, in this case any note related to the chord 'B minor'. pitch.zone defines the absolute base position over the frequency range. In this case, pitch will be relative to b3 - the note 'B' in the 3rd octave. The expression >total 8 sets the number of phrases to 8. If this property is not set, the last phrase that was assigned will be the last phrase (in this case 7). In lines 9-13 we set events for phrases 1,4,6 and 7. The assigned property for all events is pitch which defines the pitch offset relative to the pitch grid and zone that were defined in the phrase context. Let's see a few examples: '0' will be evaluated to the closest note to the pitch zone (B in the 3rd octave) within the pitch grid (B minor chord) - B3. '1' will be evaluated to the note after B3 within the B minor chord - D4. '-1' will be evaluated to the note before B3 within the B minor chord - F#3.","title":"Harmony"},{"location":"getting_started/#reusing-patterns","text":"Another super power of Phrasa is Reusability . Repetition is probably the most notable element of music composition. It's right there within the physical nature of every periodic sound. Without repetition, music is just random sound, or more technically - noise. Phrasa allows you to reuse musical elements within your piece and make variations over them - It's all about them phrases: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 tempo 127bpm pitch grid (chord c-maj) zone g4 >1-4 >1 beat >1-4.>#.lead~.pitch 2 0 4 1 >#.>3.lead~.pitch 1 -1 2 2 >3-4.pitch.grid (chord g-maj) Here, by using the subject >1-4 (lines 7 and 9), we assign some properties to phrases 1 to 4 in a single expression. Later in lines 12-14 we variate the properties for phrases 1.3 and 2.3. By setting multiple phrases collectively, we are keeping all their shared properties in one place. This will make our piece much more flexible. Check out the diagram below, representing the resulted phrases (the vertical lines) and events (the yellow rectangles): Imagine how hard you had to work writing these events one by one, and how hard you'd work if you wanted to change them. This is the true power of reusability.","title":"Reusing Patterns"},{"location":"getting_started/#sequencing","text":"Until now we have played with musical elements based on the concepts of hierarchy and repetition. What we're still missing is usage of the most fundamental concept of perceiving time - continuity , the phenomenon of things changing in a sequential manner. So what's Phrasa take on it? Sequences! 1 2 3 4 5 6 7 8 9 10 11 12 tempo 125bpm pitch grid (scale g-maj) zone g3 sequences.ascending 1,3,4,5,7 >1-4 beat >1-4.lead~.pitch (sequences.ascending >) >4.pitch.grid (scale d-maj) The expression sequences.ascending 1,3,4,5,7 (line 7) defines a sequence of values by the name ascending . In line 10 we assign the expression (sequences.ascending >) to the the property pitch . Each of the events assigned to this expression, will increment the sequence position by one (as indicated by the symbol > ) and use the current value of the sequence. Here is an illustration of the outcome: sequences.X subjects can be shorten to $X .","title":"Sequencing"},{"location":"getting_started/#multiple-instruments","text":"Not supported . So we had all these cool stuff with a single instrument, so let's branch out and have multiple instruments playing together. Also, to make our code more readable and manageable we're gonna write down the piece in multiple files: 1 2 3 4 5 6 7 tempo 130bpm pitch grid (scale g-maj) zone g3 use drums use bass cool.piece 1 2 3 4 5 6 7 8 9 10 11 12 branches.cymbals >1-8 >#.drums~.sample 1 cym1 2 cym2 branches.kicks >total 16 >1 beat >1,5,8,14.drums~ sample kick >5,8.drums~ sample snare drums.motif 1 2 3 4 5 6 7 branches.bass $ascending 1,3,4,5,7 >1-4 beat >1-4.lead~.pitch ($ascending +) >4.pitch.grid (scale d-maj) bass.motif The main file of this piece is cool.piece which defines the base pitch and tempo. The use expressions import the entire content of an external .motif file. In the motif files we created 3 branches: cymbals , kicks and bass . A branch is a new phrase derived from the context of it's parent phrase, taking it's own path with it's own inner phrases, sequences and other things. It gives you the freedom to create multiple parallel structures and define events within each of them.","title":"Multiple Instruments"}]}