{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is Phrasa? Phrasa is a music making language. It was born out of the idea that most music can be broken down into sections within sections, repeating themselves as a whole or in some variation. We call each section - a musical Phrase . Phrasa is the tool for writing down the hierarchy of a musical piece, reusing phrases and harmony. Writing music with Phrasa allow your musical piece to G R O W . Instead writing down a rigid sequence of notes, you build a flexible structure of phrases and events. Does it require me to know programming ? Nope, Phrasa is not a programming language. Does it require me to have a musical background ? Nope, you can find all the knowledge you require in this documentation. Come on then, let's get started !","title":"What is Phrasa?"},{"location":"#what-is-phrasa","text":"Phrasa is a music making language. It was born out of the idea that most music can be broken down into sections within sections, repeating themselves as a whole or in some variation. We call each section - a musical Phrase . Phrasa is the tool for writing down the hierarchy of a musical piece, reusing phrases and harmony. Writing music with Phrasa allow your musical piece to G R O W . Instead writing down a rigid sequence of notes, you build a flexible structure of phrases and events. Does it require me to know programming ? Nope, Phrasa is not a programming language. Does it require me to have a musical background ? Nope, you can find all the knowledge you require in this documentation. Come on then, let's get started !","title":"What is Phrasa?"},{"location":"concepts/","text":"Concepts Phrases In traditional music theory, a phrase is a semi-abstract term that defines a period of time within a piece that can be perceived by the listener as a whole unit. Phrasa build upon the traditional definition and extend into a much more abstract form. In Phrasa, a musical piece is by itself a single phrase, that is made out of multiple phrases that are made from more phrases and so on. Ratios Phrases durations are perceived in relation to each other. The relative durations of the phrases helps the listener to keep up with the piece, and build upon it's expectations. In phrasa we describe the length of a phrase as a ratio with relation to it's father phrase. By defining with length property of a phrase is defined relatively to its parent, for example '/4' or 'X2'. If the phrase contains inner phrases, the actual length will be the sum of them all multiiplied by it's own length. For example, if a phrase with a length of 1, contains 4 phrases of length 1/4, the final length will be 1/4 + 1/4 + 1/4 + 1/4 = 1. If the same phrase contains 5 phrases of length 1/4 it's final length will be 5/4. A phrase with the length of 2, containing 3 phrases of 1/4, will end up with the length of 3/4 X 2 = 6/4 Phrasa Expression Everything in Phrasa is either a value, a list of values or an expression. A value is defined in a single word without spaces. for example beat , 140bpm or 1/4 . A list of values are multiple values seperated with , or a newline within the same indentation. For example 1, 2.4235, 3/6 or: 1 2 3 snare kick drum arrays within arrays can be defined: 1 23,(10,20),33 or 1 2 3 23 10,20 33 An expression can be though of as a simple sentance consisting of 2 parts, a subject and an object. They can either be separated with spaces, for example: 1 tempo 120bpm or indented in a new line: 1 2 tempo 120bpm This expression sets the tempo (the subject) to 120 bpm (the object) The expression input can either be a value, such as above, or it can be a list of values: cool_sequence 10,20,10 or: 1 2 3 4 cool_sequence 10 20 30 expression input can also be an expression by itself, defined in a single row by encosing with paranthesis, for example 1 cool_event.offset (random 10%-40%)or in a new line:cool_event.offset random 10%-40% or: 1 2 3 cool_event.offset random 10%-40% And of course it can also be a list of expression/values, for example: 1 2 3 phrases.1 pitch.grid (chord Maj-C) // an expression which defines the pitch in the 1st phrase to be around the C Major chord. beat // a value that defines the 1st phrase as the beat phrase The most common type is the assignment expression which are at the core of Phrasa, functioning as instructions for updating the piece Tree. For example 1 pitch.zone F3 Which is an assignment expression for setting the property zone within the property pitch with the note value of F3. An expression type","title":"Concepts"},{"location":"concepts/#concepts","text":"","title":"Concepts"},{"location":"concepts/#phrases","text":"In traditional music theory, a phrase is a semi-abstract term that defines a period of time within a piece that can be perceived by the listener as a whole unit. Phrasa build upon the traditional definition and extend into a much more abstract form. In Phrasa, a musical piece is by itself a single phrase, that is made out of multiple phrases that are made from more phrases and so on.","title":"Phrases"},{"location":"concepts/#ratios","text":"Phrases durations are perceived in relation to each other. The relative durations of the phrases helps the listener to keep up with the piece, and build upon it's expectations. In phrasa we describe the length of a phrase as a ratio with relation to it's father phrase. By defining with length property of a phrase is defined relatively to its parent, for example '/4' or 'X2'. If the phrase contains inner phrases, the actual length will be the sum of them all multiiplied by it's own length. For example, if a phrase with a length of 1, contains 4 phrases of length 1/4, the final length will be 1/4 + 1/4 + 1/4 + 1/4 = 1. If the same phrase contains 5 phrases of length 1/4 it's final length will be 5/4. A phrase with the length of 2, containing 3 phrases of 1/4, will end up with the length of 3/4 X 2 = 6/4","title":"Ratios"},{"location":"concepts/#phrasa-expression","text":"Everything in Phrasa is either a value, a list of values or an expression. A value is defined in a single word without spaces. for example beat , 140bpm or 1/4 . A list of values are multiple values seperated with , or a newline within the same indentation. For example 1, 2.4235, 3/6 or: 1 2 3 snare kick drum arrays within arrays can be defined: 1 23,(10,20),33 or 1 2 3 23 10,20 33 An expression can be though of as a simple sentance consisting of 2 parts, a subject and an object. They can either be separated with spaces, for example: 1 tempo 120bpm or indented in a new line: 1 2 tempo 120bpm This expression sets the tempo (the subject) to 120 bpm (the object) The expression input can either be a value, such as above, or it can be a list of values: cool_sequence 10,20,10 or: 1 2 3 4 cool_sequence 10 20 30 expression input can also be an expression by itself, defined in a single row by encosing with paranthesis, for example 1 cool_event.offset (random 10%-40%)or in a new line:cool_event.offset random 10%-40% or: 1 2 3 cool_event.offset random 10%-40% And of course it can also be a list of expression/values, for example: 1 2 3 phrases.1 pitch.grid (chord Maj-C) // an expression which defines the pitch in the 1st phrase to be around the C Major chord. beat // a value that defines the 1st phrase as the beat phrase The most common type is the assignment expression which are at the core of Phrasa, functioning as instructions for updating the piece Tree. For example 1 pitch.zone F3 Which is an assignment expression for setting the property zone within the property pitch with the note value of F3. An expression type","title":"Phrasa Expression"},{"location":"getting_started/","text":"Getting Started This getting started session is intended to demonstrate what you can do with Phrasa, without getting too deep into syntax and terms. If you feel confused at some part, don't worry, In the next 'Concepts' section we will start right at the beginning. This guide presumes you have a minimal understanding about music and sound. If you are unfamiliar with terms like frequency, note or tempo you might want to begin with Phrasa Music & Sound Cheatsheet , or jump to it at any time you feel. Installation Before we begin, you can download and install Phrasa Control from here . Note, this is a very limited, experimental and unmatured version of Phrasa Control - expect great things to come in the very near future. Hello Sound Ok, let's play the first sound. Open 'Phrasa Control' and type the following text: 1 2 3 4 5 tempo 102bpm beat lead.event frequency 440 end 50% We defined and played the most basic Phrasa structure - a single musical phrase containing a single event playing repeatedly. The first expression tempo 102bpm sets tempo to 102bpm . The second line beat will make more sense in the next section. Then we have an expression that assign a musical event to the instrument by the name lead with the following properties: * Frequency of 440 hertz * End time of 50% the phrase length. To short things up we can replace the expression subject lead.event with lead~ Phrasing Let's make things slightly more interesting, adding some notes to be played: 1 2 3 4 5 6 7 tempo 135bpm phrases.1.lead~.note C3 phrases.2.lead~.note D3 phrases.3.lead~.note G3 phrases.4.lead~.note F3 phrases.1 beat In lines 2-5, we divide the piece into 4 musical phrases, each contains an event to be sent to the instrument lead with the property note . This is how our piece is divided: A 'phrase' is a fixed time frame where events can occur. Every phrase can be divided into inner phrases. To make the code above a bit more elegant we can use the mighty selector symbol - #: 1 2 3 4 5 phrases.#.lead~.note 1 C3 2 D3 3 G3 4 F4 The final expression phrases.1 beat defines the first phrase as the beat length of the piece (see picture above). This basically means that tempo (in this case 135 beats per minute) will be relative to the duration of this phrase. Finally again, let's make things shorter by replacing the expressions pharses.X with >X , for example: >1 beat . Harmony The 1st Phrasa super power is Relativity . In this example, instead of writing down the actual note as we did before, we can write the offset in relation to its harmonic context: 1 2 3 4 5 6 7 8 9 10 11 12 tempo 135bpm >1 beat pitch.grid (chord b-min) pitch.zone b3 >total 8 >#.lead~.pitch 1 3 4 4 6 -3 7 0 Lines 4-5 define the harmonic context. pitch.grid defines the set of notes, in this case 'B minor' chord in all octaves. pitch.zone defines the initial position within the grid. In this case, the note 'B' in the 3rd octave. The expression >total 8 sets the total number of phrases to 8 (if this property is not set, total phrases will be equal to the last phrase assigned) In lines 9-13 we set events for phrases 1,4,6 and 7. The value of pitch defines the offset within the previously defined harmonic context. Reusing Patterns The 2nd Phrasa super power is Reusability . Repetition is probably the most notable element of music. It's right there within the physical nature of every periodic sound. Music without repetition is just random sound, or more technically - noise. In Phrasa you can define multiple phrases in a single expression: phrases.x-y or phrases.x,y , and then make variations over them: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 tempo 127bpm pitch grid (chord c-maj) zone g4 >1-4 >1 beat >1-4.>#.lead~.pitch 2 0 4 1 >#.>3.lead~.pitch 1 -1 2 2 >3-4.pitch.grid (chord g-maj) By setting multiple phrases collectively, we are keeping all their shared properties in one place. This will make our piece much more flexible. Here is a diagram that illustrates the resulted phrases and and events: Imagine how hard you had to work writing these events one by one, and even harder if you wanted to make a change. This is the power of reusability. Sequencing Until now we have played with musical elements based on the concepts of hierarchy and repetition. Now let's play with another fundamental concept of perceiving time - continuity . For this we have our old pal - the sequencer: 1 2 3 4 5 6 7 8 9 10 11 12 tempo 125bpm pitch grid (scale g-maj) zone g3 sequences.ascending 1,3,4,5,7 >1-4 beat >1-4.lead~.pitch (sequences.ascending >) >4.pitch.grid (scale d-maj) In line 7 we defines a sequence of values by the name ascending . In line 10 we assign the expression (sequences.ascending >) to the the property pitch . Each of the events assigned to this expression, will increment the sequence position by one (as indicated by the symbol > ) and use the current value of the sequence. Here is an illustration of the outcome: The subject sequences.name can be shorten to $name . Multiple Instruments Not supported . So we had all these cool stuff with a single instrument, so let's branch out and have multiple instruments playing together. Also, to make our code more readable and manageable we're gonna write down the piece in multiple files: 1 2 3 4 5 6 7 tempo 130bpm pitch grid (scale g-maj) zone g3 use drums use bass cool.piece 1 2 3 4 5 6 7 8 9 10 11 12 branches.cymbals >1-8 >#.drums~.sample 1 cym1 2 cym2 branches.kicks >total 16 >1 beat >1,5,8,14.drums~ sample kick >5,8.drums~ sample snare drums.motif 1 2 3 4 5 6 7 branches.bass $ascending 1,3,4,5,7 >1-4 beat >1-4.lead~.pitch ($ascending +) >4.pitch.grid (scale d-maj) bass.motif The main file of this piece is cool.piece which defines the base pitch and tempo. The use expressions import the entire content of an external .motif file. In the motif files we created 3 branches: cymbals , kicks and bass . A branch is a new phrase derived from the context of it's parent phrase, taking it's own path with it's own inner phrases, sequences and other things. It gives you the freedom to create multiple parallel structures and define events within each of them.","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"This getting started session is intended to demonstrate what you can do with Phrasa, without getting too deep into syntax and terms. If you feel confused at some part, don't worry, In the next 'Concepts' section we will start right at the beginning. This guide presumes you have a minimal understanding about music and sound. If you are unfamiliar with terms like frequency, note or tempo you might want to begin with Phrasa Music & Sound Cheatsheet , or jump to it at any time you feel.","title":"Getting Started"},{"location":"getting_started/#installation","text":"Before we begin, you can download and install Phrasa Control from here . Note, this is a very limited, experimental and unmatured version of Phrasa Control - expect great things to come in the very near future.","title":"Installation"},{"location":"getting_started/#hello-sound","text":"Ok, let's play the first sound. Open 'Phrasa Control' and type the following text: 1 2 3 4 5 tempo 102bpm beat lead.event frequency 440 end 50% We defined and played the most basic Phrasa structure - a single musical phrase containing a single event playing repeatedly. The first expression tempo 102bpm sets tempo to 102bpm . The second line beat will make more sense in the next section. Then we have an expression that assign a musical event to the instrument by the name lead with the following properties: * Frequency of 440 hertz * End time of 50% the phrase length. To short things up we can replace the expression subject lead.event with lead~","title":"Hello Sound"},{"location":"getting_started/#phrasing","text":"Let's make things slightly more interesting, adding some notes to be played: 1 2 3 4 5 6 7 tempo 135bpm phrases.1.lead~.note C3 phrases.2.lead~.note D3 phrases.3.lead~.note G3 phrases.4.lead~.note F3 phrases.1 beat In lines 2-5, we divide the piece into 4 musical phrases, each contains an event to be sent to the instrument lead with the property note . This is how our piece is divided: A 'phrase' is a fixed time frame where events can occur. Every phrase can be divided into inner phrases. To make the code above a bit more elegant we can use the mighty selector symbol - #: 1 2 3 4 5 phrases.#.lead~.note 1 C3 2 D3 3 G3 4 F4 The final expression phrases.1 beat defines the first phrase as the beat length of the piece (see picture above). This basically means that tempo (in this case 135 beats per minute) will be relative to the duration of this phrase. Finally again, let's make things shorter by replacing the expressions pharses.X with >X , for example: >1 beat .","title":"Phrasing"},{"location":"getting_started/#harmony","text":"The 1st Phrasa super power is Relativity . In this example, instead of writing down the actual note as we did before, we can write the offset in relation to its harmonic context: 1 2 3 4 5 6 7 8 9 10 11 12 tempo 135bpm >1 beat pitch.grid (chord b-min) pitch.zone b3 >total 8 >#.lead~.pitch 1 3 4 4 6 -3 7 0 Lines 4-5 define the harmonic context. pitch.grid defines the set of notes, in this case 'B minor' chord in all octaves. pitch.zone defines the initial position within the grid. In this case, the note 'B' in the 3rd octave. The expression >total 8 sets the total number of phrases to 8 (if this property is not set, total phrases will be equal to the last phrase assigned) In lines 9-13 we set events for phrases 1,4,6 and 7. The value of pitch defines the offset within the previously defined harmonic context.","title":"Harmony"},{"location":"getting_started/#reusing-patterns","text":"The 2nd Phrasa super power is Reusability . Repetition is probably the most notable element of music. It's right there within the physical nature of every periodic sound. Music without repetition is just random sound, or more technically - noise. In Phrasa you can define multiple phrases in a single expression: phrases.x-y or phrases.x,y , and then make variations over them: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 tempo 127bpm pitch grid (chord c-maj) zone g4 >1-4 >1 beat >1-4.>#.lead~.pitch 2 0 4 1 >#.>3.lead~.pitch 1 -1 2 2 >3-4.pitch.grid (chord g-maj) By setting multiple phrases collectively, we are keeping all their shared properties in one place. This will make our piece much more flexible. Here is a diagram that illustrates the resulted phrases and and events: Imagine how hard you had to work writing these events one by one, and even harder if you wanted to make a change. This is the power of reusability.","title":"Reusing Patterns"},{"location":"getting_started/#sequencing","text":"Until now we have played with musical elements based on the concepts of hierarchy and repetition. Now let's play with another fundamental concept of perceiving time - continuity . For this we have our old pal - the sequencer: 1 2 3 4 5 6 7 8 9 10 11 12 tempo 125bpm pitch grid (scale g-maj) zone g3 sequences.ascending 1,3,4,5,7 >1-4 beat >1-4.lead~.pitch (sequences.ascending >) >4.pitch.grid (scale d-maj) In line 7 we defines a sequence of values by the name ascending . In line 10 we assign the expression (sequences.ascending >) to the the property pitch . Each of the events assigned to this expression, will increment the sequence position by one (as indicated by the symbol > ) and use the current value of the sequence. Here is an illustration of the outcome: The subject sequences.name can be shorten to $name .","title":"Sequencing"},{"location":"getting_started/#multiple-instruments","text":"Not supported . So we had all these cool stuff with a single instrument, so let's branch out and have multiple instruments playing together. Also, to make our code more readable and manageable we're gonna write down the piece in multiple files: 1 2 3 4 5 6 7 tempo 130bpm pitch grid (scale g-maj) zone g3 use drums use bass cool.piece 1 2 3 4 5 6 7 8 9 10 11 12 branches.cymbals >1-8 >#.drums~.sample 1 cym1 2 cym2 branches.kicks >total 16 >1 beat >1,5,8,14.drums~ sample kick >5,8.drums~ sample snare drums.motif 1 2 3 4 5 6 7 branches.bass $ascending 1,3,4,5,7 >1-4 beat >1-4.lead~.pitch ($ascending +) >4.pitch.grid (scale d-maj) bass.motif The main file of this piece is cool.piece which defines the base pitch and tempo. The use expressions import the entire content of an external .motif file. In the motif files we created 3 branches: cymbals , kicks and bass . A branch is a new phrase derived from the context of it's parent phrase, taking it's own path with it's own inner phrases, sequences and other things. It gives you the freedom to create multiple parallel structures and define events within each of them.","title":"Multiple Instruments"}]}